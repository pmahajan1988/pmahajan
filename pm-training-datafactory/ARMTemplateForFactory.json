{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pm-training-datafactory"
		},
		"pm_training_linkedservice_databrick_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'pm_training_linkedservice_databrick'"
		},
		"pm_training_linkedservice_datalakegen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'pm_training_linkedservice_datalakegen2'"
		},
		"pm_training_linkedservice_datalakegen2_gittest_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'pm_training_linkedservice_datalakegen2_gittest'"
		},
		"pm_training_linkedservice_datalakegen2_readonly_servicePrincipalCredential": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalCredential' of 'pm_training_linkedservice_datalakegen2_readonly'"
		},
		"pm_training_linkedservice_remote_filesystem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'pm_training_linkedservice_remote_filesystem'"
		},
		"pm_training_linkedservice_sqldb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pm_training_linkedservice_sqldb'"
		},
		"pm_training_linkedservice_sqldb2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pm_training_linkedservice_sqldb2'"
		},
		"pm_training_linkedservice_sqldb_other_az_account_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pm_training_linkedservice_sqldb_other_az_account'"
		},
		"pm_training_linkedservice_synapse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pm_training_linkedservice_synapse'"
		},
		"pm_training_linkedservice_datalakegen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pmtrainingdatalakegen2.dfs.core.windows.net/"
		},
		"pm_training_linkedservice_datalakegen2_gittest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pmtrainingdatalakegen2.dfs.core.windows.net/"
		},
		"pm_training_linkedservice_datalakegen2_readonly_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pmtrainingdatalakegen2.dfs.core.windows.net/"
		},
		"pm_training_linkedservice_datalakegen2_readonly_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "ce5aa64a-240f-4eab-97d6-8f82e54274fc"
		},
		"pm_training_linkedservice_datalakegen2_readonly_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "5026fd16-48fa-4e19-82af-7bdf8b29d8d8"
		},
		"pm_training_linkedservice_key_vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://key-vault-prashant.vault.azure.net/"
		},
		"pm_training_linkedservice_remote_filesystem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\PM_ADF_Training\\files\\"
		},
		"pm_training_linkedservice_remote_filesystem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "Student"
		},
		"pm_training_linkedservice_sqldb_via_keyvault_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "key-sqldb-pm-user"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_bpp_BottomLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy objects from one group. The objects belonging to this group will be copied parallelly.",
				"activities": [
					{
						"name": "ListObjectsFromOneGroup",
						"description": "List objects from one group and iterate each of them to downstream activities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.ObjectsPerGroupToCopy",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "RouteJobsBasedOnLoadingBehavior",
									"description": "Check the loading behavior for each object if it requires full load or incremental load. If it is Default or FullLoad case, do full load. If it is DeltaLoad case, do incremental load.",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@json(item().DataLoadingBehaviorSettings).dataLoadingBehavior",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "FullLoad",
												"activities": [
													{
														"name": "FullLoadOneObject",
														"description": "Take a full snapshot on this object and copy it to the destination",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "@json(item().CopySourceSettings).sqlReaderQuery",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "db_to_db_metadatadriven_copy_task_bpp_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "db_to_db_metadatadriven_copy_task_bpp_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "DeltaLoad",
												"activities": [
													{
														"name": "GetMaxWatermarkValue",
														"description": "Query the source object to get the max value from watermark column",
														"type": "Lookup",
														"dependsOn": [],
														"policy": {
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select max([@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}]) as CurrentMaxWaterMarkColumnValue from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}]",
																	"type": "Expression"
																},
																"partitionOption": "None"
															},
															"dataset": {
																"referenceName": "db_to_db_metadatadriven_copy_task_bpp_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														}
													},
													{
														"name": "DeltaLoadOneObject",
														"description": "Copy the changed data only from last time via comparing the value in watermark column to identify changes.",
														"type": "Copy",
														"dependsOn": [
															{
																"activity": "GetMaxWatermarkValue",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [
															{
																"name": "Source",
																"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
															},
															{
																"name": "Destination",
																"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
															}
														],
														"typeProperties": {
															"source": {
																"type": "AzureSqlSource",
																"sqlReaderQuery": {
																	"value": "select * from [@{json(item().SourceObjectSettings).schema}].[@{json(item().SourceObjectSettings).table}] \n    where [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] > @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, \n    concat('''', json(item().DataLoadingBehaviorSettings).watermarkColumnStartValue, ''''))}\n    and [@{json(item().DataLoadingBehaviorSettings).watermarkColumnName}] <= @{if(contains(json(item().DataLoadingBehaviorSettings).watermarkColumnType, 'Int'),\n    activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, \n    concat('''', activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue, ''''))}",
																	"type": "Expression"
																},
																"partitionOption": {
																	"value": "@json(item().CopySourceSettings).partitionOption",
																	"type": "Expression"
																},
																"partitionSettings": {
																	"partitionColumnName": {
																		"value": "@json(item().CopySourceSettings).partitionColumnName",
																		"type": "Expression"
																	},
																	"partitionUpperBound": {
																		"value": "@json(item().CopySourceSettings).partitionUpperBound",
																		"type": "Expression"
																	},
																	"partitionLowerBound": {
																		"value": "@json(item().CopySourceSettings).partitionLowerBound",
																		"type": "Expression"
																	},
																	"partitionNames": "@json(item().CopySourceSettings).partitionNames"
																}
															},
															"sink": {
																"type": "AzureSqlSink",
																"preCopyScript": {
																	"value": "@json(item().CopySinkSettings).preCopyScript",
																	"type": "Expression"
																},
																"tableOption": {
																	"value": "@json(item().CopySinkSettings).tableOption",
																	"type": "Expression"
																}
															},
															"enableStaging": false,
															"validateDataConsistency": false,
															"translator": {
																"value": "@json(item().CopyActivitySettings).translator",
																"type": "Expression"
															}
														},
														"inputs": [
															{
																"referenceName": "db_to_db_metadatadriven_copy_task_bpp_SourceDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SourceObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SourceObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "db_to_db_metadatadriven_copy_task_bpp_DestinationDS",
																"type": "DatasetReference",
																"parameters": {
																	"cw_schema": {
																		"value": "@json(item().SinkObjectSettings).schema",
																		"type": "Expression"
																	},
																	"cw_table": {
																		"value": "@json(item().SinkObjectSettings).table",
																		"type": "Expression"
																	}
																}
															}
														]
													},
													{
														"name": "UpdateWatermarkColumnValue",
														"type": "SqlServerStoredProcedure",
														"dependsOn": [
															{
																"activity": "DeltaLoadOneObject",
																"dependencyConditions": [
																	"Succeeded"
																]
															}
														],
														"policy": {
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"storedProcedureName": "[[UpdateWatermarkColumnValue_bpp]",
															"storedProcedureParameters": {
																"Id": {
																	"value": {
																		"value": "@item().Id",
																		"type": "Expression"
																	},
																	"type": "Int32"
																},
																"watermarkColumnStartValue": {
																	"value": {
																		"value": "@activity('GetMaxWatermarkValue').output.firstRow.CurrentMaxWaterMarkColumnValue",
																		"type": "Expression"
																	},
																	"type": "String"
																}
															}
														},
														"linkedServiceName": {
															"referenceName": "pm_training_linkedservice_sqldb",
															"type": "LinkedServiceReference"
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "DefaultFullLoadOneObject",
												"description": "Take a full snapshot on this object and copy it to the destination",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [
													{
														"name": "Source",
														"value": "@{json(item().SourceObjectSettings).schema}.@{json(item().SourceObjectSettings).table}"
													},
													{
														"name": "Destination",
														"value": "@{json(item().SinkObjectSettings).schema}.@{json(item().SinkObjectSettings).table}"
													}
												],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@json(item().CopySourceSettings).sqlReaderQuery",
															"type": "Expression"
														},
														"partitionOption": {
															"value": "@json(item().CopySourceSettings).partitionOption",
															"type": "Expression"
														},
														"partitionSettings": {
															"partitionColumnName": {
																"value": "@json(item().CopySourceSettings).partitionColumnName",
																"type": "Expression"
															},
															"partitionUpperBound": {
																"value": "@json(item().CopySourceSettings).partitionUpperBound",
																"type": "Expression"
															},
															"partitionLowerBound": {
																"value": "@json(item().CopySourceSettings).partitionLowerBound",
																"type": "Expression"
															},
															"partitionNames": "@json(item().CopySourceSettings).partitionNames"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "@json(item().CopySinkSettings).preCopyScript",
															"type": "Expression"
														},
														"tableOption": {
															"value": "@json(item().CopySinkSettings).tableOption",
															"type": "Expression"
														}
													},
													"enableStaging": false,
													"validateDataConsistency": false,
													"translator": {
														"value": "@json(item().CopyActivitySettings).translator",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "db_to_db_metadatadriven_copy_task_bpp_SourceDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SourceObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SourceObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "db_to_db_metadatadriven_copy_task_bpp_DestinationDS",
														"type": "DatasetReference",
														"parameters": {
															"cw_schema": {
																"value": "@json(item().SinkObjectSettings).schema",
																"type": "Expression"
															},
															"cw_table": {
																"value": "@json(item().SinkObjectSettings).table",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ObjectsPerGroupToCopy": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_bpp_20221010"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-10T07:13:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_to_db_metadatadriven_copy_task_bpp_SourceDS')]",
				"[concat(variables('factoryId'), '/datasets/db_to_db_metadatadriven_copy_task_bpp_DestinationDS')]",
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_bpp_MiddleLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
				"activities": [
					{
						"name": "DivideOneBatchIntoMultipleGroups",
						"description": "Divide objects from single batch into multiple sub parallel groups to avoid reaching the output limit of lookup activity.",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                    if(equals(mod(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "GetObjectsPerGroupToCopy",
									"description": "Get objects (tables etc.) from control table required to be copied in this group. The order of objects to be copied following the TaskId in control table (ORDER BY [TaskId] DESC).",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "WITH OrderedControlTable AS (\n                             SELECT *, ROW_NUMBER() OVER (ORDER BY [TaskId], [Id] DESC) AS RowNumber\n                             FROM @{pipeline().parameters.MainControlTableName}\n                             where TopLevelPipelineName = '@{pipeline().parameters.TopLevelPipelineName}'\n                             and TriggerName like '%@{pipeline().parameters.TriggerName}%' and CopyEnabled = 1)\n                             SELECT * FROM OrderedControlTable WHERE RowNumber BETWEEN @{add(mul(int(item()),pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity),\n                             add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch), 1))}\n                             AND @{min(add(mul(int(item()), pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity), add(mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, pipeline().parameters.CurrentSequentialNumberOfBatch),\n                             pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity)),\n                            mul(pipeline().parameters.SumOfObjectsToCopyForCurrentBatch, add(pipeline().parameters.CurrentSequentialNumberOfBatch,1)), pipeline().parameters.SumOfObjectsToCopy)}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "db_to_db_metadatadriven_copy_task_bpp_ControlDS",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "CopyObjectsInOneGroup",
									"description": "Execute another pipeline to copy objects from one group. The objects belonging to this group will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetObjectsPerGroupToCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "db_to_db_metadatadriven_copy_task_bpp_BottomLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ObjectsPerGroupToCopy": {
												"value": "@activity('GetObjectsPerGroupToCopy').output.value",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int"
					},
					"TopLevelPipelineName": {
						"type": "String"
					},
					"TriggerName": {
						"type": "String"
					},
					"CurrentSequentialNumberOfBatch": {
						"type": "Int"
					},
					"SumOfObjectsToCopy": {
						"type": "Int"
					},
					"SumOfObjectsToCopyForCurrentBatch": {
						"type": "Int"
					},
					"MainControlTableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_bpp_20221010"
				},
				"annotations": [],
				"lastPublishTime": "2022-10-10T07:14:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_to_db_metadatadriven_copy_task_bpp_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/db_to_db_metadatadriven_copy_task_bpp_BottomLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_bpp_TopLevel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "db_to_db_metadatadriven_copy_task_bpp_ControlDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "db_to_db_metadatadriven_copy_task_bpp_MiddleLevel",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 50
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 2
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "MainControlTable_bpp"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_bpp_20221010"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2022-10-10T07:17:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_to_db_metadatadriven_copy_task_bpp_ControlDS')]",
				"[concat(variables('factoryId'), '/pipelines/db_to_db_metadatadriven_copy_task_bpp_MiddleLevel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_copy_remote_file_to_datalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_copy_remote_file_to_datalake",
				"activities": [
					{
						"name": "copy_remote_file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "customerid",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "customername",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "customername",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_remote_files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_azure_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-11T05:39:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_remote_files')]",
				"[concat(variables('factoryId'), '/datasets/dataset_azure_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_databrick')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_databrick",
				"activities": [
					{
						"name": "notebook_databrick",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/prashantmahajan_learn@outlook.com/pm-training-adls-notebook"
						},
						"linkedServiceName": {
							"referenceName": "pm_training_linkedservice_databrick",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-14T05:20:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_databrick')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_dataflow_parameter_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_dataflow_parameter_test",
				"activities": [
					{
						"name": "dataflow_parameter_test",
						"description": "dataflow_parameter_test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_parameter_test",
								"type": "DataFlowReference",
								"parameters": {
									"input_price": {
										"value": "@pipeline().parameters.pipeline_price",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pipeline_price": {
						"type": "int"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-14T06:17:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_parameter_test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_dept_load_new')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_dept_load",
				"activities": [
					{
						"name": "copy_data_dept_new",
						"description": "copy_data_dept_new",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_dept_new",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_dept_table_new",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_dept_new')]",
				"[concat(variables('factoryId'), '/datasets/dataset_dept_table_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_dept_revenue_flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_dept_revenue_flow",
				"activities": [
					{
						"name": "dept_revenue_file_to_table",
						"description": "dept_revenue_file_to_table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@{concat('delete from ',pipeline().parameters.param_dept_schema,'.',pipeline().parameters.param_dept_revenue_table)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "dept_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "dept_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "dept_revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dept_revenue",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_dept_revenue_flatfile",
								"type": "DatasetReference",
								"parameters": {
									"param_dept_revenue_file": {
										"value": "@pipeline().parameters.param_dept_revenue_file_src",
										"type": "Expression"
									},
									"param_container": {
										"value": "@pipeline().parameters.param_container_src",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_dept_revenue_table",
								"type": "DatasetReference",
								"parameters": {
									"param_dept_schema": {
										"value": "@pipeline().parameters.param_dept_schema",
										"type": "Expression"
									},
									"param_dept_revenue_table": {
										"value": "@pipeline().parameters.param_dept_revenue_table",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "dept_revenue_table_to_newfile",
						"description": "dept_revenue_table_to_newfile",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "dept_revenue_file_to_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_dept_revenue_table",
								"type": "DatasetReference",
								"parameters": {
									"param_dept_schema": {
										"value": "@pipeline().parameters.param_dept_schema",
										"type": "Expression"
									},
									"param_dept_revenue_table": {
										"value": "@pipeline().parameters.param_dept_revenue_table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_dept_revenue_flatfile",
								"type": "DatasetReference",
								"parameters": {
									"param_dept_revenue_file": {
										"value": "@pipeline().parameters.param_dept_revenue_file_tgt_new",
										"type": "Expression"
									},
									"param_container": {
										"value": "@pipeline().parameters.param_container_tgt",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"param_dept_revenue_file_src": {
						"type": "String"
					},
					"param_dept_schema": {
						"type": "String"
					},
					"param_dept_revenue_table": {
						"type": "String"
					},
					"param_container_src": {
						"type": "String"
					},
					"param_dept_revenue_file_tgt_new": {
						"type": "string"
					},
					"param_container_tgt": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-07T14:42:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_dept_revenue_flatfile')]",
				"[concat(variables('factoryId'), '/datasets/dataset_dept_revenue_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_for_github_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_for_github_test",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "empid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "empid",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "empname",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "empname",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "emprole",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emprole",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "salary",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "salary",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "deptid",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "deptid",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_emp_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_emp_file_tgt",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_emp_file')]",
				"[concat(variables('factoryId'), '/datasets/dataset_emp_file_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_load_synapse_db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pipeline_load_synapse_db",
				"activities": [
					{
						"name": "dataflow_synapse",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_datalake_to_synapse",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dept": {},
									"emp": {},
									"dimdept": {},
									"dimemp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-12T06:02:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_datalake_to_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_multi_file_to_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FILE_LOOP",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_metadata_multi_file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_metadata_multi_file').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "copy_file_to_table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "input",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_multi_file",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "dataset_multi_table",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@pipeline().parameters.schema",
													"type": "Expression"
												},
												"table": {
													"value": "@replace(item().name,'.csv','')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "get_metadata_multi_file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dataset_multi_file",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-10T06:10:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_multi_file')]",
				"[concat(variables('factoryId'), '/datasets/dataset_multi_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_sjo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": "AzureBlobFSFile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_sjo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "input",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_azure_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_book')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "bookid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "bookname",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "library",
					"table": "book"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_cogni_book')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb_other_az_account",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "bookid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "bookname",
						"type": "varchar"
					},
					{
						"name": "bookprice",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "cogni",
					"table": "book"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb_other_az_account')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dept_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept_new.csv",
						"folderPath": "input",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptid",
						"type": "String"
					},
					{
						"name": "deptname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dept_revenue_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept.csv",
						"folderPath": "input",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "deptid",
						"type": "String"
					},
					{
						"name": "deptname",
						"type": "String"
					},
					{
						"name": "revenue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dept_revenue_flatfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "dataset_dept_revenue_flatfile",
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"param_dept_revenue_file": {
						"type": "string"
					},
					"param_container": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().param_dept_revenue_file",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().param_container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dept_id",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					},
					{
						"name": "dept_revenue",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dept_revenue_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "dataset_dept_revenue_table",
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"param_dept_schema": {
						"type": "string"
					},
					"param_dept_revenue_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "dept_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dept_name",
						"type": "varchar"
					},
					{
						"name": "dept_revenue",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().param_dept_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().param_dept_revenue_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dept_synapse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "dept_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dname",
						"type": "varchar"
					},
					{
						"name": "Totalrevenue",
						"type": "int",
						"precision": 10
					},
					{
						"name": "targetrevenue",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_dept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_dept_table_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "deptid",
						"type": "nvarchar"
					},
					{
						"name": "deptname",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dept",
					"table": "dept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_emp_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp.csv",
						"folderPath": "input",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "empname",
						"type": "String"
					},
					{
						"name": "emprole",
						"type": "String"
					},
					{
						"name": "salary",
						"type": "String"
					},
					{
						"name": "deptid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_emp_file_tgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_emp_synapse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_synapse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "eid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ename",
						"type": "varchar"
					},
					{
						"name": "salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dim_emp1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_gittest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2_gittest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept.csv",
						"folderPath": "input",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2_gittest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_multi_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_datalakegen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "input",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_datalakegen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_multi_remote_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "dataset_multi_remote_files",
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_remote_filesystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_remote_filesystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_multi_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_remote_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "dataset_remote_files",
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_remote_filesystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "customer.csv",
						"folderPath": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customerid",
						"type": "String"
					},
					{
						"name": "customername",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_remote_filesystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_trgbook')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "bookid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "bookname",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "library",
					"table": "trgbook"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_bpp_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_bpp_20221010"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": "MainControlTable_bpp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_bpp_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_bpp_20221010"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_bpp_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_bpp_20221010"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_i3q_ControlDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_i3q_20221010"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"table": "MainControlTable_i3q"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_i3q_DestinationDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_i3q_20221010"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_to_db_metadatadriven_copy_task_i3q_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pm_training_linkedservice_sqldb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_schema": {
						"type": "String"
					},
					"cw_table": {
						"type": "String"
					}
				},
				"folder": {
					"name": "db_to_db_metadatadriven_copy_task_i3q_20221010"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().cw_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_databrick')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_databrick",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4648523029241384.4.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('pm_training_linkedservice_databrick_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterVersion": "10.4.x-scala2.12",
					"newClusterInitScripts": [],
					"clusterOption": "Fixed"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_datalakegen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_datalakegen2",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pm_training_linkedservice_datalakegen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('pm_training_linkedservice_datalakegen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_datalakegen2_gittest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_datalakegen2_gittest",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pm_training_linkedservice_datalakegen2_gittest_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('pm_training_linkedservice_datalakegen2_gittest_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_datalakegen2_readonly')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_datalakegen2_readonly",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pm_training_linkedservice_datalakegen2_readonly_properties_typeProperties_url')]",
					"tenant": "[parameters('pm_training_linkedservice_datalakegen2_readonly_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('pm_training_linkedservice_datalakegen2_readonly_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "SecureString",
						"value": "[parameters('pm_training_linkedservice_datalakegen2_readonly_servicePrincipalCredential')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_key_vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_key_vault",
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('pm_training_linkedservice_key_vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_remote_filesystem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_remote_filesystem",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('pm_training_linkedservice_remote_filesystem_properties_typeProperties_host')]",
					"userId": "[parameters('pm_training_linkedservice_remote_filesystem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('pm_training_linkedservice_remote_filesystem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "pm-training-remote-ir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/pm-training-remote-ir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_sqldb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_sqldb",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pm_training_linkedservice_sqldb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_sqldb2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_sqldb2",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pm_training_linkedservice_sqldb2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_sqldb_other_az_account')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_sqldb_other_az_account",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pm_training_linkedservice_sqldb_other_az_account_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_sqldb_via_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_sqldb_via_keyvault",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "pm_training_linkedservice_key_vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('pm_training_linkedservice_sqldb_via_keyvault_properties_typeProperties_connectionString_secretName')]",
						"secretVersion": "b5a59eedf5044053825f44d1e5cbec00"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/pm_training_linkedservice_key_vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm_training_linkedservice_synapse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "pm_training_linkedservice_synapse",
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('pm_training_linkedservice_synapse_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pm-training-remote-ir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "pm-training-remote-integration-runtime",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_datalake_to_synapse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_dept_revenue_file",
								"type": "DatasetReference"
							},
							"name": "dept"
						},
						{
							"dataset": {
								"referenceName": "dataset_emp_file",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_dept_synapse",
								"type": "DatasetReference"
							},
							"name": "dimdept"
						},
						{
							"dataset": {
								"referenceName": "dataset_emp_synapse",
								"type": "DatasetReference"
							},
							"name": "dimemp"
						}
					],
					"transformations": [
						{
							"name": "deptcolumnchange"
						},
						{
							"name": "deptcalculatetargetrevenue"
						},
						{
							"name": "empcolumnchange"
						},
						{
							"name": "emppassthru"
						},
						{
							"name": "joinempdept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          deptid as integer,",
						"          deptname as string,",
						"          revenue as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dept",
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          emprole as string,",
						"          salary as integer,",
						"          deptid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"dept select(mapColumn(",
						"          dept_id = deptid,",
						"          deptname,",
						"          totalrevenue = revenue",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> deptcolumnchange",
						"deptcolumnchange derive(targetrevenue = totalrevenue*1.2,",
						"          dname = initCap(deptname)) ~> deptcalculatetargetrevenue",
						"emp select(mapColumn(",
						"          eid = empid,",
						"          empname,",
						"          salary,",
						"          deptid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> empcolumnchange",
						"empcolumnchange derive(ename = initCap(empname)) ~> emppassthru",
						"emppassthru, deptcalculatetargetrevenue join(deptid == dept_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinempdept",
						"deptcalculatetargetrevenue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          dept_id as integer,",
						"          dname as string,",
						"          Totalrevenue as integer,",
						"          targetrevenue as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          dept_id,",
						"          dname,",
						"          Totalrevenue = totalrevenue,",
						"          targetrevenue",
						"     )) ~> dimdept",
						"joinempdept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          eid as integer,",
						"          ename as string,",
						"          salary as integer,",
						"          dname as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          eid,",
						"          ename,",
						"          salary,",
						"          dname",
						"     )) ~> dimemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_dept_revenue_file')]",
				"[concat(variables('factoryId'), '/datasets/dataset_emp_file')]",
				"[concat(variables('factoryId'), '/datasets/dataset_dept_synapse')]",
				"[concat(variables('factoryId'), '/datasets/dataset_emp_synapse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_parameter_test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "dataflow_parameter_test",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_book",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dataset_trgbook",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     input_price as integer",
						"}",
						"source(output(",
						"          bookid as integer,",
						"          bookname as string,",
						"          price as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 filter(price>$input_price) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          bookid as integer,",
						"          bookname as string,",
						"          price as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          bookid,",
						"          bookname,",
						"          price",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_book')]",
				"[concat(variables('factoryId'), '/datasets/dataset_trgbook')]"
			]
		}
	]
}